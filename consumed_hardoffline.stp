#!/usr/bin/stap

probe begin
{
    printf("begin trace for consumed memory hard offline\n");
}
probe end
{
    printf("end trace for consumed memory hard offline\n");
}

// 定义一个本地函数，返回值和参数均为long
function is_vm_fault_hwpoison:long (flag:long)   
{
      VM_FAULT_HWPOISON = 0x000010 
      if (flag & VM_FAULT_HWPOISON)
      {
          return 1
      }
      return 0
}

// 
// stap -L 'kernel.function("do_swap_page").return'
// kernel.function("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3520").return $return:vm_fault_t $vmf:struct vm_fault*
//
probe kernel.function("do_swap_page").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}


//
// do_swap_page return VM_FAULT_HWPOISON at this line
// 
//  stap -L 'kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:*")'
//  kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536") $vmf:struct vm_fault* $page:struct page* $si:struct swap_info_struct* $entry:swp_entry_t $exclusive:int $ret:vm_fault_t $shadow:void*
probe kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536")
{
    printf("pretty printf vmf = %s\n", $vmf$$$)
    printf("local variables: %s\n\n", $$locals)
    printf("pretty printf entry = %s\n", $entry$);
}

probe kernel.function("do_user_addr_fault")
{
    printf("pid: %d, address %d\n", pid(), $address);
}

probe kernel.function("me_pagecache_clean")
{
    printf("function %s \n", ppfunc())
    print_backtrace()
}

// trace who set hwpoison
// VM_FAULT_HWPOISON: 0x000010
probe kernel.function("__do_fault").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}
