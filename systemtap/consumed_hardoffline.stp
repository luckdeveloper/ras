#!/usr/bin/stap

global fault_flags;
global vma_flags;

global VM_FAULT_HWPOISON = 0x000010

probe begin 
{
    printf("begin trace for consumed memory hard offline\n");

    /* See include/linux/mm.h */
    fault_flags[0] = "WRITE";        fault_flags[1] = "NONLINEAR";
    fault_flags[2] = "MKWRITE";      fault_flags[3] = "ALLOW_RETRY";
    fault_flags[4] = "RETRY_NOWAIT"; fault_flags[5] = "KILLABLE";
    
    vma_flags[0] = "VM_GROWSDOWN";      vma_flags[2] = "VM_PFNMAP";
    vma_flags[3] = "VM_DENYWRITE";      vma_flags[5] = "VM_LOCKED";
    vma_flags[6] = "VM_IO";             vma_flags[7] = "VM_SEQ_READ";
    vma_flags[8] = "VM_RAND_READ";      vma_flags[9] = "VM_DONTCOPY";
    vma_flags[10] = "VM_DONTEXPAND";    vma_flags[12] = "VM_ACCOUNT";
    vma_flags[13] = "VM_NORESERVE";     vma_flags[14] = "VM_HUGETLB";
    vma_flags[15] = "VM_NONLINEAR";     vma_flags[16] = "VM_ARCH_1";
    vma_flags[18] = "VM_DONTDUMP";      vma_flags[20] = "VM_MIXEDMAP";
    vma_flags[21] = "VM_HUGEPAGE";      vma_flags[22] = "VM_NOHUGEPAGE";
}

probe end
{
    printf("end trace for consumed memory hard offline\n");
}

/// @brief 定义一个本地函数，返回值和参数均为long
/// @param flags, type: long 
/// @return type long, 
function is_vm_fault_hwpoison:long (flag:long)   
{
      if (flag & VM_FAULT_HWPOISON)
      {
          return 1
      }
      return 0
}

// 
// stap -L 'kernel.function("do_swap_page").return'
// kernel.function("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3520").return $return:vm_fault_t $vmf:struct vm_fault*
//
probe kernel.function("do_swap_page").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}


//
// do_swap_page return VM_FAULT_HWPOISON at this line
// 
//  stap -L 'kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:*")'
//  kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536") $vmf:struct vm_fault* $page:struct page* $si:struct swap_info_struct* $entry:swp_entry_t $exclusive:int $ret:vm_fault_t $shadow:void*
probe kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536")
{
    printf("pretty printf vmf = %s\n", $vmf$$$)
    printf("local variables: %s\n", $$locals)
    printf("pretty printf entry = %s\n", $entry$);
}


probe kernel.function("isolate_lru_page")
{
    printf("enter function %s \n", ppfunc())
    printf("page flags: %d\n", $page->flags)
    print_backtrace()
}

probe kernel.function("me_pagecache_clean")
{
    printf("enter function %s \n", ppfunc())
    printf("page flags: %d\n", $p->flags)
    
    // 检测PageAnon(p) 是否满足
    // 不考虑compound page
    PAGE_MAPPING_ANON = 0x1
    if ($p->mapping & PAGE_MAPPING_ANON)
    {
        printf("PageAnon: TRUE\n");
    }
    else
    {
        printf("PageAnon: FALSE\n");
    }

    print_backtrace()
}

// trace who set hwpoison
// VM_FAULT_HWPOISON: 0x000010
probe kernel.function("__do_fault").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}

//-----------------------------------------------------------------------------
// part 2 vm_fault()
//-----------------------------------------------------------------------------
function prot_str:string(prot: long) 
{
    return sprintf("%s%s%s%s",
            (prot & 0x1) ? "r" : "-",
            (prot & 0x2) ? "w" : "-",
            (prot & 0x4) ? "x" : "-",
            (prot & 0x8) ? "s" : "-");
}

function vma_flags_str:string(flags: long) 
{
    prot = flags & 0xf;
    mprot = (flags >> 4) & 0xf;
    flags = flags >> 8;
    
    for(i = 0; i < 23; ++i) {
        if(flags & 1) {
            str = sprintf("%s|%s", str, vma_flags[i]);
        }
        
        flags >>= 1;
    }
    
    return sprintf("prot: %s may: %s flags: %s", 
                    prot_str(prot), prot_str(mprot),
                    substr(str, 1, strlen(str) - 1));
}

function fault_flags_str:string(flags: long) 
{
    for(i = 0; i < 6; ++i) {
        if(flags & 1) {
            str = sprintf("%s|%s", str, fault_flags[i]);
        }
        
        flags >>= 1;
    }
    
    /* Cut first pipe sign ('|') */
    return substr(str, 1, strlen(str) - 1);
}

function vm_fault_str(fault_type: long) 
{
    if(vm_fault_contains(fault_type, VM_FAULT_OOM))
        return "OOM";
    else if(vm_fault_contains(fault_type, VM_FAULT_SIGBUS))
        return "SIGBUS";
    else if(vm_fault_contains(fault_type, VM_FAULT_MINOR))
        return "MINOR";
    else if(vm_fault_contains(fault_type, VM_FAULT_MAJOR))
        return "MAJOR";
    else if(vm_fault_contains(fault_type, VM_FAULT_NOPAGE))
        return "NOPAGE";
    else if(vm_fault_contains(fault_type, VM_FAULT_LOCKED))
        return "LOCKED";
    else if(vm_fault_contains(fault_type, VM_FAULT_ERROR))
        return "ERROR";
    
    // vm_fault_contains doesn't support VM_FAULT_HWPOISON, so I implement it 
    if (fault_type & VM_FAULT_HWPOISON)
    {
        return "HWPOISON";
    }    

    return "???";
}

probe vm.pagefault 
{
    printf("vm.pagefault pid: %d \n", pid());
    printf("\taddr: %p flags: %s\n", $address, fault_flags_str($flags));
    printf("\tVMA [%p:%p]\n", $vma->vm_start, $vma->vm_end);
    printf("\t%s\n", vma_flags_str($vma->vm_flags));
    printf("\tamp: %p\n", $vma->anon_vma) 
    
    if($vma->vm_file != 0)
        printf("\tfile: %s\n", d_name($vma->vm_file->f_path->dentry)) 
}

probe vm.pagefault.return 
{ 
    printf("\t => pid: %d pf: %s\n", pid(), vm_fault_str(fault_type));
}