#!/usr/bin/stap

global fault_flags;
global vma_flags;

global VM_FAULT_HWPOISON = 0x000010

probe begin 
{
    printf("begin trace for consumed memory hard offline\n");

}

probe end
{
    printf("end trace for consumed memory hard offline\n");
}

/// @brief 定义一个本地函数，返回值和参数均为long
/// @param flags, type: long 
/// @return type long, 
function is_vm_fault_hwpoison:long (flag:long)   
{
      if (flag & VM_FAULT_HWPOISON)
      {
          return 1
      }
      return 0
}

// 
// stap -L 'kernel.function("do_swap_page").return'
// kernel.function("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3520").return $return:vm_fault_t $vmf:struct vm_fault*
//
probe kernel.function("do_swap_page").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}


//
// do_swap_page return VM_FAULT_HWPOISON at this line
// 
//  stap -L 'kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:*")'
//  kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536") $vmf:struct vm_fault* $page:struct page* $si:struct swap_info_struct* $entry:swp_entry_t $exclusive:int $ret:vm_fault_t $shadow:void*
probe kernel.statement("do_swap_page@/build/linux-mYZaRL/linux-5.15.0/mm/memory.c:3536")
{
    printf("pretty printf vmf = %s\n", $vmf$$$)
    printf("local variables: %s\n", $$locals)
    printf("pretty printf entry = %s\n", $entry$);
}


probe kernel.function("isolate_lru_page")
{
    printf("enter function %s \n", ppfunc())
    printf("page flags: %d\n", $page->flags)
    print_backtrace()
}

probe kernel.function("me_pagecache_clean")
{
    printf("enter function %s \n", ppfunc())
    printf("page flags: %d\n", $p->flags)
    
    // 检测PageAnon(p) 是否满足
    // 不考虑compound page
    PAGE_MAPPING_ANON = 0x1
    if ($p->mapping & PAGE_MAPPING_ANON)
    {
        printf("PageAnon: TRUE\n");
    }
    else
    {
        printf("PageAnon: FALSE\n");
    }

    print_backtrace()
}

// trace who set hwpoison
// VM_FAULT_HWPOISON: 0x000010
probe kernel.function("__do_fault").return
{
    if (is_vm_fault_hwpoison($return))
    {
        printf("function %s return:  %d\n", ppfunc(), $return)
        print_backtrace()
    }
}

probe kernel.function("handle_page_fault")
{
    printf("address: 0x%x, error code: %d\n", 
        $address, $error_code)  
}

probe kernel.function("do_user_addr_fault")
{
    printf("address: 0x%x, error code: %d\n", 
        $address, $error_code)  
}

probe kernel.function("handle_mm_fault")
{
    if (pid() == target())
    {
        printf("enter function %s \n", ppfunc())
        printf("pretty printf vmf = %s\n", $vma$$$)
        printf("address :0x%x, flags :%d\n", 
            $address, $flags)
    }
}